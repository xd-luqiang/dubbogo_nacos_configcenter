// Code generated by protoc-gen-go-triple. DO NOT EDIT.
// versions:
// - protoc-gen-go-triple v1.0.2
// - protoc             v3.15.8
// source: model_service.proto

package model_service

import (
	context "context"
	protocol "dubbo.apache.org/dubbo-go/v3/protocol"
	dubbo3 "dubbo.apache.org/dubbo-go/v3/protocol/dubbo3"
	invocation "dubbo.apache.org/dubbo-go/v3/protocol/invocation"
	fmt "fmt"
	grpc_go "github.com/dubbogo/grpc-go"
	codes "github.com/dubbogo/grpc-go/codes"
	metadata "github.com/dubbogo/grpc-go/metadata"
	status "github.com/dubbogo/grpc-go/status"
	common "github.com/dubbogo/triple/pkg/common"
	constant "github.com/dubbogo/triple/pkg/common/constant"
	triple "github.com/dubbogo/triple/pkg/triple"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc_go.SupportPackageIsVersion7

// ServiceClient is the client API for Service service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ServiceClient interface {
	// Sends a greeting
	Get(ctx context.Context, in *Request, opts ...grpc_go.CallOption) (*Response, common.ErrorWithAttachment)
	// Sends a greeting via stream
	GetStream(ctx context.Context, opts ...grpc_go.CallOption) (Service_GetStreamClient, error)
}

type serviceClient struct {
	cc *triple.TripleConn
}

type ServiceClientImpl struct {
	Get       func(ctx context.Context, in *Request) (*Response, error)
	GetStream func(ctx context.Context) (Service_GetStreamClient, error)
}

func (c *ServiceClientImpl) GetDubboStub(cc *triple.TripleConn) ServiceClient {
	return NewServiceClient(cc)
}

func NewServiceClient(cc *triple.TripleConn) ServiceClient {
	return &serviceClient{cc}
}

func (c *serviceClient) Get(ctx context.Context, in *Request, opts ...grpc_go.CallOption) (*Response, common.ErrorWithAttachment) {
	out := new(Response)
	interfaceKey := ctx.Value(constant.InterfaceKey).(string)
	return out, c.cc.Invoke(ctx, "/"+interfaceKey+"/Get", in, out)
}

func (c *serviceClient) GetStream(ctx context.Context, opts ...grpc_go.CallOption) (Service_GetStreamClient, error) {
	interfaceKey := ctx.Value(constant.InterfaceKey).(string)
	stream, err := c.cc.NewStream(ctx, "/"+interfaceKey+"/GetStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &serviceGetStreamClient{stream}
	return x, nil
}

type Service_GetStreamClient interface {
	Send(*Request) error
	Recv() (*Response, error)
	grpc_go.ClientStream
}

type serviceGetStreamClient struct {
	grpc_go.ClientStream
}

func (x *serviceGetStreamClient) Send(m *Request) error {
	return x.ClientStream.SendMsg(m)
}

func (x *serviceGetStreamClient) Recv() (*Response, error) {
	m := new(Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ServiceServer is the server API for Service service.
// All implementations must embed UnimplementedServiceServer
// for forward compatibility
type ServiceServer interface {
	// Sends a greeting
	Get(context.Context, *Request) (*Response, error)
	// Sends a greeting via stream
	GetStream(Service_GetStreamServer) error
	mustEmbedUnimplementedServiceServer()
}

// UnimplementedServiceServer must be embedded to have forward compatible implementations.
type UnimplementedServiceServer struct {
	proxyImpl protocol.Invoker
}

func (UnimplementedServiceServer) Get(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedServiceServer) GetStream(Service_GetStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method GetStream not implemented")
}
func (s *UnimplementedServiceServer) XXX_SetProxyImpl(impl protocol.Invoker) {
	s.proxyImpl = impl
}

func (s *UnimplementedServiceServer) XXX_GetProxyImpl() protocol.Invoker {
	return s.proxyImpl
}

func (s *UnimplementedServiceServer) XXX_ServiceDesc() *grpc_go.ServiceDesc {
	return &Service_ServiceDesc
}
func (UnimplementedServiceServer) mustEmbedUnimplementedServiceServer() {}

// UnsafeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ServiceServer will
// result in compilation errors.
type UnsafeServiceServer interface {
	mustEmbedUnimplementedServiceServer()
}

func RegisterServiceServer(s grpc_go.ServiceRegistrar, srv ServiceServer) {
	s.RegisterService(&Service_ServiceDesc, srv)
}

func _Service_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc_go.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	base := srv.(dubbo3.Dubbo3GrpcService)
	args := []interface{}{}
	args = append(args, in)
	md, _ := metadata.FromIncomingContext(ctx)
	invAttachment := make(map[string]interface{}, len(md))
	for k, v := range md {
		invAttachment[k] = v
	}
	invo := invocation.NewRPCInvocation("Get", args, invAttachment)
	if interceptor == nil {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	info := &grpc_go.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/model_service.Service/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).Get(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_GetStream_Handler(srv interface{}, stream grpc_go.ServerStream) error {
	_, ok := srv.(dubbo3.Dubbo3GrpcService)
	invo := invocation.NewRPCInvocation("GetStream", nil, nil)
	if !ok {
		fmt.Println(invo)
		return nil
	}
	return srv.(ServiceServer).GetStream(&serviceGetStreamServer{stream})
}

type Service_GetStreamServer interface {
	Send(*Response) error
	Recv() (*Request, error)
	grpc_go.ServerStream
}

type serviceGetStreamServer struct {
	grpc_go.ServerStream
}

func (x *serviceGetStreamServer) Send(m *Response) error {
	return x.ServerStream.SendMsg(m)
}

func (x *serviceGetStreamServer) Recv() (*Request, error) {
	m := new(Request)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Service_ServiceDesc is the grpc_go.ServiceDesc for Service service.
// It's only intended for direct use with grpc_go.RegisterService,
// and not to be introspected or modified (even as a copy)
var Service_ServiceDesc = grpc_go.ServiceDesc{
	ServiceName: "model_service.Service",
	HandlerType: (*ServiceServer)(nil),
	Methods: []grpc_go.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _Service_Get_Handler,
		},
	},
	Streams: []grpc_go.StreamDesc{
		{
			StreamName:    "GetStream",
			Handler:       _Service_GetStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "model_service.proto",
}
